config:
  target: 'https://scc-backend-575031.azurewebsites.net/rest'
  plugins:
    metrics-by-endpoint:
      useOnlyRequestNames: true
  processor: "./test-utils.js"
  phases:
  - name: "Warm up"    
    duration: 20
    arrivalCount: 10
  - name: "Experiment"    
    duration: 60
    arrivalRate: 2               # set this value as high as possible for avoiding timeouts

scenarios:
  - name: 'User checks own rentals'
    weight: 5
    flow:
      - function: "selectUserSkewed"
      - post:                          # First: login as a user
          url: "/users/auth"
          name: "POST:/users/auth"
          headers:
            Content-Type: application/json
          json:
            id: "{{ userid }}"
            nickname: "{{ name }}"
            password: "{{ pwd }}"
      - get:                          # Get houses for the user (assuming rentals + houses + discount initial page)
          url: "/users/{{ userid }}/houses?st=0&len=20"
          name: "GET:/users/*/houses"
          headers:
            Accept: application/json
          capture: 
            json: "$"
            as: "housesLst"
      - get:                          # Get generic discounted houses (assuming rentals + houses + discount initial page)
          url: "/houses?discount=1&st=0&len=20"
          name: "GET:/houses/discount"
          headers:
            Accept: application/json
          capture: 
            json: "$"
            as: "housesDiscountLst"
      - loop:                                   # Check houses for their rentals
        - get:                          
            url: "/houses/{{ $loopElement.id }}/rentals"
            name: "GET:/houses/*/rentals"
            headers:
              Accept: application/json
        over: "housesLst"

  - name: 'User checks own houses'
    weight: 5
    flow:
      - function: "selectUser"
      - post:                          # First: login as a user
          url: "/users/auth"
          name: "POST:/users/auth"
          headers:
            Content-Type: application/json
          json:
            id: "{{ userid }}"
            nickname: "{{ name }}"
            password: "{{ pwd }}"
      - get:                          # Get houses for the user (assuming rentals + houses + discount initial page)
          url: "/users/{{ userid }}/houses?st=0&len=20"
          name: "GET:/users/*/houses"
          headers:
            Accept: application/json
          capture: 
            json: "$"
            as: "housesLst"
      - get:                          # Get generic discounted houses (assuming rentals + houses + discount initial page)
          url: "/houses?discount=1&st=0&len=20"
          name: "GET:/houses/discount"
          headers:
            Accept: application/json
          capture: 
            json: "$"
            as: "housesDiscountLst"
      - loop:
        - get:                                   # Check houses for their rentals                          
            url: "/houses/{{ $loopElement.id }}/rentals?st=0&len=20"
            name: "GET:/houses/*/rentals"
            headers:
              Accept: application/json
            capture: 
              json: "$"
              as: "houseRentalsLst"
        - get:                                   # Get unanswered questions
            url: "/houses/{{ $loopElement.id }}/questions?noanswer=true&st=0&len=20"
            name: "GET:/houses/*/questions"
            headers:
              Accept: application/json
            capture: 
              json: "$"
              as: "questionLst"
            ifTrue: "houseId"
        - function: "selectQuestion"
        - post:                                   # Answer one question                          
            url: "/houses/{{ houseId }}/questions/"
            name: "PUT:/houses/*/questions/*/reply"
            headers:
              Accept: application/json
              Content-Type: application/json
            json:
              id: "{{ replyId }}"
              houseId: "{{ houseId }}"
              authorId: "{{ userid }}"
              body: "{{ reply }}"
              repliedToId: "{{ questionId }}"
            ifTrue: "houseId and questionId"
        over: "housesLst"

  - name: 'Mixed browsing'
    weight: 40
    flow:
      - function: "selectUser"
      - post:                          # First: login as a user
          url: "/users/auth"
          name: "POST:/users/auth"
          headers:
            Content-Type: application/json
          json:
            id: "{{ userid }}"
            nickname: "{{ name }}"
            password: "{{ pwd }}"
      - loop:                                  
        - get:                          # Get houses for the user (assuming rentals + houses + discount initial page)
            url: "/users/{{ userid }}/houses?st=0&len=20"
            name: "GET:/users/*/houses"
            headers:
              Accept: application/json
            capture: 
              json: "$"
              as: "housesLst"
        - get:                          # Get generic discounted houses (assuming rentals + houses + discount initial page)
            url: "/houses?discount=1&st=0&len=20"
            name: "GET:/houses/discount"
            headers:
              Accept: application/json
            capture: 
              json: "$"
              as: "housesDiscountLst"
        - function: "decideNextAction"
        ################################# Search location
        - get:                          
            url: "/houses?location={{ location }}&initDate={{ initDate }}$endDate={{ endDate }}&st=0&len=20"
            name: "GET:/houses/*@location"
            headers:
              Accept: application/json
            capture: 
              json: "$"
              as: "housesLst"
            ifTrue: "nextAction == 1"
        - function: "selectHouse"
        ################################# Browse next page
        - get:                          
            url: "/houses?discount=1&st=0&len=20"
            name: "GET:/houses/discount"
            headers:
              Accept: application/json
            ifTrue: "afterNextAction == 0 and nextAction == 0"
        - get:                          
            url: "/houses?location={{ location }}&initDate={{ initDate }}$endDate={{ endDate }}&st=20&len=20"
            name: "GET:/houses/search"
            headers:
              Accept: application/json
            ifTrue: "afterNextAction == 0 and nextAction == 1"
        ################################# Check questions
        - get:                          
            url: "/houses/{{ houseId }}/questions?st=0&len=20"
            name: "GET:/houses/*/questions"
            headers:
              Accept: application/json
            ifTrue: "houseId and afterNextAction == 1"
        ################################# Post questions
        - post:                          
            url: "/houses/{{ houseId }}/questions"
            name: "POST:/house/*/questions"
            headers:
              Accept: application/json
              Content-Type: application/json
            json:
              id: "{{ questionId }}"
              houseId: "{{ houseId }}"
              authorId: "{{ userid }}"
              body: "{{ text }}"
            ifTrue: "houseId and afterNextAction == 2"
        ################################# Reserve house
        - get:                                           # get free slots for selected house
            url: "/houses/{{ houseId }}/rentals?free=true"   
            name: "GET:/houses/*/rentals"
            headers:
              Accept: application/json
            capture: 
              json: "$"
              as: "rentalLst"
            ifTrue: "houseId and afterNextAction == 3"
        - function: "selectRental"            
        - post:                                          # reserve selected house in selected slot
            url: "/houses/{{ houseId }}/rentals/{{ rentalId }}/renter"
            name: "POST:/houses/*/rentals/*/renter"
            headers:
              Accept: application/json
            json:
              id: "{{ userid }}"
            ifTrue: "rentalId and afterNextAction == 3"
        whileTrue: "random80"

